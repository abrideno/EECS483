<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Floating Point Instructions</TITLE>
<META NAME="description" CONTENT="Floating Point Instructions">
<META NAME="keywords" CONTENT="spim">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="spim.css">
</HEAD>
<BODY LANG="EN">
 <A NAME="tex2html257" HREF="node21.htm"><IMG WIDTH=37 HEIGHT=24 ALIGN=BOTTOM ALT="next" SRC="next.gif"></A> <A NAME="tex2html255" HREF="node9.htm"><IMG WIDTH=26 HEIGHT=24 ALIGN=BOTTOM ALT="up" SRC="up.gif"></A> <A NAME="tex2html249" HREF="node19.htm"><IMG WIDTH=63 HEIGHT=24 ALIGN=BOTTOM ALT="previous" SRC="prev.gif"></A>   <BR>
<B> Next:</B> <A NAME="tex2html258" HREF="node21.htm">Exception and Trap Instructions</A>
<B>Up:</B> <A NAME="tex2html256" HREF="node9.htm">Description of the MIPS </A>
<B> Previous:</B> <A NAME="tex2html250" HREF="node19.htm">Data Movement Instructions</A>
<BR> <P>
<H2><A NAME="SECTION000211000000000000000">Floating Point Instructions</A></H2>
<P>
The MIPS has a floating point coprocessor (numbered 1) that operates
on single precision (32-bit) and double precision (64-bit) floating
point numbers.  This coprocessor has its own registers, which are
numbered <TT>$f0</TT>-<TT>$f31</TT>.  Because these registers are only
32-bits wide, two of them are required to hold doubles. To simplify
matters, floating point operations only use even-numbered
registers--including instructions that operate on single floats.
<P>
Values are moved in or out of these registers a word (32-bits) at a
time by <TT>lwc1</TT>, <TT>swc1</TT>, <TT>mtc1</TT>, and <TT>mfc1</TT>
instructions described above or by the <TT>l.s</TT>, <TT>l.d</TT>, <TT>
s.s</TT>, and <TT>s.d</TT> pseudoinstructions described below.  The flag set
by floating point comparison operations is read by the CPU with its
<TT>bc1t</TT> and <TT>bc1f</TT> instructions.
<P>
In all instructions below, <TT>FRdest</TT>, <TT>FRsrc1</TT>, <TT>FRsrc2</TT>,
and <TT>FRsrc</TT> are floating point registers (e.g., <TT>$f2</TT>).
<P>
<P><EM><TT>abs.d FRdest, FRsrc</TT>Point Absolute Value Double<BR></EM>
<EM><TT>abs.s FRdest, FRsrc</TT>Point Absolute Value Single<BR></EM>
Compute the absolute value of the floating float double (single) in
register <TT>FRsrc</TT> and put it in register <TT>FRdest</TT>.
<P>
<P><EM><TT>add.d FRdest, FRsrc1, FRsrc2</TT>Point Addition Double<BR></EM>
<EM><TT>add.s FRdest, FRsrc1, FRsrc2</TT>Point Addition Single<BR></EM>
Compute the sum of the floating float doubles (singles) in registers
<TT>FRsrc1</TT> and <TT>FRsrc2</TT> and put it in register <TT>FRdest</TT>.
<P>
<P><EM><TT>c.eq.d FRsrc1, FRsrc2</TT>Equal Double<BR></EM>
<EM><TT>c.eq.s FRsrc1, FRsrc2</TT>Equal Single<BR></EM>
Compare the floating point double in register <TT>FRsrc1</TT> against
the one in <TT>FRsrc2</TT> and set the floating point condition flag
true if they are equal.
<P>
<P><EM><TT>c.le.d FRsrc1, FRsrc2</TT>Less Than Equal Double<BR></EM>
<EM><TT>c.le.s FRsrc1, FRsrc2</TT>Less Than Equal Single<BR></EM>
Compare the floating point double in register <TT>FRsrc1</TT> against
the one in <TT>FRsrc2</TT> and set the floating point condition flag
true if the first is less than or equal to the second.
<P>
<P><EM><TT>c.lt.d FRsrc1, FRsrc2</TT>Less Than Double<BR></EM>
<EM><TT>c.lt.s FRsrc1, FRsrc2</TT>Less Than Single<BR></EM>
Compare the floating point double in register <TT>FRsrc1</TT> against
the one in <TT>FRsrc2</TT> and set the condition flag true if the first
is less than the second.
<P>
<P><EM><TT>cvt.d.s FRdest, FRsrc</TT>Single to Double<BR></EM>
<EM><TT>cvt.d.w FRdest, FRsrc</TT>Integer to Double<BR></EM>
Convert the single precision floating point number or integer in
register <TT>FRsrc</TT> to a double precision number and put it in
register <TT>FRdest</TT>.
<P>
<P><EM><TT>cvt.s.d FRdest, FRsrc</TT>Double to Single<BR></EM>
<EM><TT>cvt.s.w FRdest, FRsrc</TT>Integer to Single<BR></EM>
Convert the double precision floating point number or integer in
register <TT>FRsrc</TT> to a single precision number and put it in
register <TT>FRdest</TT>.
<P>
<P><EM><TT>cvt.w.d FRdest, FRsrc</TT>Double to Integer<BR></EM>
<EM><TT>cvt.w.s FRdest, FRsrc</TT>Single to Integer<BR></EM>
Convert the double or single precision floating point number in
register <TT>FRsrc</TT> to an integer and put it in register <TT>
FRdest</TT>.
<P>
<P><EM><TT>div.d FRdest, FRsrc1, FRsrc2</TT>Point Divide Double<BR></EM>
<EM><TT>div.s FRdest, FRsrc1, FRsrc2</TT>Point Divide Single<BR></EM>
Compute the quotient of the floating float doubles (singles) in
registers <TT>FRsrc1</TT> and <TT>FRsrc2</TT> and put it in register
<TT>FRdest</TT>.
<P>
<P><EM><TT>l.d FRdest, address</TT>Floating Point Double  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
<EM><TT>l.s FRdest, address</TT>Floating Point Single  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Load the floating float double (single) at <TT>address</TT> into register
<TT>FRdest</TT>.
<P>
<P><EM><TT>mov.d FRdest, FRsrc</TT>Floating Point Double<BR></EM>
<EM><TT>mov.s FRdest, FRsrc</TT>Floating Point Single<BR></EM>
Move the floating float double (single) from register <TT>FRsrc</TT> to
register <TT>FRdest</TT>.
<P>
<P><EM><TT>mul.d FRdest, FRsrc1, FRsrc2</TT>Point Multiply Double<BR></EM>
<EM><TT>mul.s FRdest, FRsrc1, FRsrc2</TT>Point Multiply Single<BR></EM>
Compute the product of the floating float doubles (singles) in
registers <TT>FRsrc1</TT> and <TT>FRsrc2</TT> and put it in register
<TT>FRdest</TT>.
<P>
<P><EM><TT>neg.d FRdest, FRsrc</TT>Double<BR></EM>
<EM><TT>neg.s FRdest, FRsrc</TT>Single<BR></EM>
Negate the floating point double (single) in register <TT>FRsrc</TT>
and put it in register <TT>FRdest</TT>.
<P>
<P><EM><TT>s.d FRdest, address</TT>Floating Point Double  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
<EM><TT>s.s FRdest, address</TT>Floating Point Single  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Store the floating float double (single) in register <TT>FRdest</TT> at
<TT>address</TT>.
<P>
<P><EM><TT>sub.d FRdest, FRsrc1, FRsrc2</TT>Point Subtract Double<BR></EM>
<EM><TT>sub.s FRdest, FRsrc1, FRsrc2</TT>Point Subtract Single<BR></EM>
Compute the difference of the floating float doubles (singles) in
registers <TT>FRsrc1</TT> and <TT>FRsrc2</TT> and put it in register
<TT>FRdest</TT>.
<P>
<HR><A NAME="tex2html257" HREF="node21.htm"><IMG WIDTH=37 HEIGHT=24 ALIGN=BOTTOM ALT="next" SRC="next.gif"></A> <A NAME="tex2html255" HREF="node9.htm"><IMG WIDTH=26 HEIGHT=24 ALIGN=BOTTOM ALT="up" SRC="up.gif"></A> <A NAME="tex2html249" HREF="node19.htm"><IMG WIDTH=63 HEIGHT=24 ALIGN=BOTTOM ALT="previous" SRC="prev.gif"></A>   <BR>
<B> Next:</B> <A NAME="tex2html258" HREF="node21.htm">Exception and Trap Instructions</A>
<B>Up:</B> <A NAME="tex2html256" HREF="node9.htm">Description of the MIPS </A>
<B> Previous:</B> <A NAME="tex2html250" HREF="node19.htm">Data Movement Instructions</A>
<P><ADDRESS>
<I>David A. Carley <BR>
Thu Jul 24 11:21:53 CDT 1997</I>
</ADDRESS>
</BODY>
</HTML>
