<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<!--Converted with LaTeX2HTML 96.1 (Feb 5, 1996) by Nikos Drakos (nikos@cbl.leeds.ac.uk), CBLU, University of Leeds -->
<HTML>
<HEAD>
<TITLE>Arithmetic and Logical Instructions</TITLE>
<META NAME="description" CONTENT="Arithmetic and Logical Instructions">
<META NAME="keywords" CONTENT="spim">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<LINK REL=STYLESHEET HREF="spim.css">
</HEAD>
<BODY LANG="EN">
 <A NAME="tex2html187" HREF="node14.htm"><IMG WIDTH=37 HEIGHT=24 ALIGN=BOTTOM ALT="next" SRC="next.gif"></A> <A NAME="tex2html185" HREF="node9.htm"><IMG WIDTH=26 HEIGHT=24 ALIGN=BOTTOM ALT="up" SRC="up.gif"></A> <A NAME="tex2html179" HREF="node12.htm"><IMG WIDTH=63 HEIGHT=24 ALIGN=BOTTOM ALT="previous" SRC="prev.gif"></A>   <BR>
<B> Next:</B> <A NAME="tex2html188" HREF="node14.htm">Constant-Manipulating Instructions</A>
<B>Up:</B> <A NAME="tex2html186" HREF="node9.htm">Description of the MIPS </A>
<B> Previous:</B> <A NAME="tex2html180" HREF="node12.htm">Addressing Modes</A>
<BR> <P>
<H2><A NAME="SECTION00024000000000000000">Arithmetic and Logical Instructions</A></H2>
<P>
In all instructions below, <TT>Src2</TT> can either be a register or an
immediate value (a 16 bit integer). The immediate forms of the
instructions are only included for reference.  The assembler will
translate the more general form of an instruction (e.g., <TT>add</TT>)
into the immediate form (e.g., <TT>addi</TT>) if the second argument is
constant.
<P>
<P><EM><TT>abs Rdest, Rsrc</TT>Value  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Put the absolute value of the integer from register <TT>Rsrc</TT> in
register <TT>Rdest</TT>.
<P>
<P><EM><TT>add Rdest, Rsrc1, Src2</TT>(with overflow)<BR></EM>
<EM><TT>addi Rdest, Rsrc1, Imm</TT>Immediate (with overflow)<BR></EM>
<EM><TT>addu Rdest, Rsrc1, Src2</TT>(without overflow)<BR></EM>
<EM><TT>addiu Rdest, Rsrc1, Imm</TT>Immediate (without overflow)<BR></EM>
Put the sum of the integers from register <TT>Rsrc1</TT> and <TT>
Src2</TT> (or <TT>Imm</TT>) into register <TT>Rdest</TT>.
<P>
<P><EM><TT>and Rdest, Rsrc1, Src2</TT><BR></EM>
<EM><TT>andi Rdest, Rsrc1, Imm</TT>Immediate<BR></EM>
Put the logical AND of the integers from register <TT>Rsrc1</TT> and
<TT>Src2</TT> (or <TT>Imm</TT>) into register <TT>Rdest</TT>.
<P>
<P><EM><TT>div Rsrc1, Rsrc2</TT>(signed)<BR></EM>
<EM><TT>divu Rsrc1, Rsrc2</TT>(unsigned)<BR></EM>
Divide the contents of the two registers.
<TT>divu</TT> treats is operands as unsigned values.  Leave the quotient in
register <TT>lo</TT> and the remainder in register <TT>hi</TT>.  Note that
if an operand is negative, the remainder is unspecified by the MIPS
architecture and depends on the conventions of the machine on which
SPIM is run.
<P>
<P><EM><TT>div Rdest, Rsrc1, Src2</TT>(signed, with overflow)  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
<EM><TT>divu Rdest, Rsrc1, Src2</TT>(unsigned, without overflow)  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Put the quotient of the integers from register <TT>Rsrc1</TT> and <TT>
Src2</TT> into register <TT>Rdest</TT>. <TT>divu</TT> treats is operands as
unsigned values.
<P>
<P><EM><TT>mul Rdest, Rsrc1, Src2</TT>(without overflow)  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
<P><EM><TT>mulo Rdest, Rsrc1, Src2</TT>(with overflow)  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
<EM><TT>mulou Rdest, Rsrc1, Src2</TT>Multiply (with overflow)  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Put the product of the integers from register <TT>Rsrc1</TT> and <TT>
Src2</TT> into register <TT>Rdest</TT>.
<P>
<P><EM><TT>mult Rsrc1, Rsrc2</TT><BR></EM>
<EM><TT>multu Rsrc1, Rsrc2</TT>Multiply<BR></EM>
Multiply the contents of the two registers.  Leave the low-order word
of the product in register <TT>lo</TT> and the high-word in register <TT>
hi</TT>.
<P>
<P><EM><TT>neg Rdest, Rsrc</TT>Value (with overflow)  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
<EM><TT>negu Rdest, Rsrc</TT>Value (without overflow)  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Put the negative of the integer from register <TT>Rsrc</TT> into
register <TT>Rdest</TT>.
<P>
<P><EM><TT>nor Rdest, Rsrc1, Src2</TT><BR></EM>
Put the logical NOR of the integers from register <TT>Rsrc1</TT> and
<TT>Src2</TT> into register <TT>Rdest</TT>.
<P>
<P><EM><TT>not Rdest, Rsrc</TT> <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Put the bitwise logical negation of the integer from register <TT>
Rsrc</TT> into register <TT>Rdest</TT>.
<P>
<P><EM><TT>or Rdest, Rsrc1, Src2</TT><BR></EM>
<EM><TT>ori Rdest, Rsrc1, Imm</TT>Immediate<BR></EM>
Put the logical OR of the integers from register <TT>Rsrc1</TT> and <TT>
Src2</TT> (or <TT>Imm</TT>) into register <TT>Rdest</TT>.
<P>
<P><EM><TT>rem Rdest, Rsrc1, Src2</TT> <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
<EM><TT>remu Rdest, Rsrc1, Src2</TT>Remainder  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Put the remainder from dividing the integer in register <TT>Rsrc1</TT> by
the integer in <TT>Src2</TT> into register <TT>Rdest</TT>.  Note that if an
operand is negative, the remainder is unspecified by the MIPS
architecture and depends on the conventions of the machine on which
SPIM is run.
<P>
<P><EM><TT>rol Rdest, Rsrc1, Src2</TT>Left  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
<EM><TT>ror Rdest, Rsrc1, Src2</TT>Right  <IMG WIDTH=5 HEIGHT=12 ALIGN=BOTTOM ALT="tex2html_wrap_inline1547" SRC="img16.gif"  > <BR></EM>
Rotate the contents of register <TT>Rsrc1</TT> left (right) by the
distance indicated by <TT>Src2</TT> and put the result in register
<TT>Rdest</TT>.
<P>
<P><EM><TT>sll Rdest, Rsrc1, Src2</TT>Left Logical<BR></EM>
<EM><TT>sllv Rdest, Rsrc1, Rsrc2</TT>Left Logical Variable<BR></EM>
<EM><TT>sra Rdest, Rsrc1, Src2</TT>Right Arithmetic<BR></EM>
<EM><TT>srav Rdest, Rsrc1, Rsrc2</TT>Right Arithmetic Variable<BR></EM>
<EM><TT>srl Rdest, Rsrc1, Src2</TT>Right Logical<BR></EM>
<EM><TT>srlv Rdest, Rsrc1, Rsrc2</TT>Right Logical Variable<BR></EM>
Shift the contents of register <TT>Rsrc1</TT> left (right) by the
distance indicated by <TT>Src2</TT> (<TT>Rsrc2</TT>) and put the
result in register <TT>Rdest</TT>.
<P>
<P><EM><TT>sub Rdest, Rsrc1, Src2</TT>(with overflow)<BR></EM>
<EM><TT>subu Rdest, Rsrc1, Src2</TT>(without overflow)<BR></EM>
Put the difference of the integers from register <TT>Rsrc1</TT> and <TT>
Src2</TT> into register <TT>Rdest</TT>.
<P>
<P><EM><TT>xor Rdest, Rsrc1, Src2</TT><BR></EM>
<EM><TT>xori Rdest, Rsrc1, Imm</TT>Immediate<BR></EM>
Put the logical XOR of the integers from register <TT>Rsrc1</TT> and
<TT>Src2</TT> (or <TT>Imm</TT>) into register <TT>Rdest</TT>.
<P>
<HR><A NAME="tex2html187" HREF="node14.htm"><IMG WIDTH=37 HEIGHT=24 ALIGN=BOTTOM ALT="next" SRC="next.gif"></A> <A NAME="tex2html185" HREF="node9.htm"><IMG WIDTH=26 HEIGHT=24 ALIGN=BOTTOM ALT="up" SRC="up.gif"></A> <A NAME="tex2html179" HREF="node12.htm"><IMG WIDTH=63 HEIGHT=24 ALIGN=BOTTOM ALT="previous" SRC="prev.gif"></A>   <BR>
<B> Next:</B> <A NAME="tex2html188" HREF="node14.htm">Constant-Manipulating Instructions</A>
<B>Up:</B> <A NAME="tex2html186" HREF="node9.htm">Description of the MIPS </A>
<B> Previous:</B> <A NAME="tex2html180" HREF="node12.htm">Addressing Modes</A>
<P><ADDRESS>
<I>David A. Carley <BR>
Thu Jul 24 11:21:53 CDT 1997</I>
</ADDRESS>
</BODY>
</HTML>
